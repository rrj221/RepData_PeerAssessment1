scores
list(scores)
scores <- xpathSApply(docRavens, "//div[@class='score']", xmlValue)
scores
scores <- xpathSApply(docRavens, "//div[@class="score"]", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='score']", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='logo']", xmlValue)
scores
scores <- xpathSApply(docRavens, "//div[@class='game-info']", xmlValue)
scores
docRavens <- htmlTreeParse(ravensUrl, useInternalNodes = TRUE)
scores <- xpathSApply(docRavens, "//div[@class='game-info']", xmlValue)
scores
scores <- xpathSApply(docRavens, "//div[@class='score']", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='team-name']", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='game-info']", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='game-result']", xmlValue)
scores <- xpathSApply(docRavens, "//div[@class='game-result win']", xmlValue)
write.csv(docRavens, "C/Users/rrj22/OneDrive/Desktop/ravens.csv")
saveXML(docRavens, "C/Users/rrj22/OneDrive/Desktop/ravens.csv")
saveXML(docRavens, "C/Users/rrj22/OneDrive/Desktop/ravens.xml")
saveXML(docRavens, "C\Users\rrj22\OneDrive\Desktop\ravens.xml")
saveXML(docRavens, "C:\Users\rrj22\OneDrive\Desktop\ravens.xml")
saveXML(docRavens, "*C:\Users\rrj22\OneDrive\Deskto/ravens.xml)
saveXML(docRavens, "*C:\Users\rrj22\OneDrive\Deskto/ravens.xml")
saveXML(docRavens, "*C:\Users\rrj22\OneDrive\Deskto/ravens.xml")
saveXML(docRavens, "ravens.xml")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/rrj221/repos")
names(jsonData)
names(jsonData@owner)
names(jsonData@full_name)
names(jsonData$full_name)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson[1])
cat(myjson[1][1])
cat(myjson[[1]])
myjson[1]
clear()
myjson[1]
cat(myjson[[1]])
iris2 <- fromJSON(myjson)
iris2
iris2 <- fromJSON(myjson)
head(iris)
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
library(data.table)
install.packages("data.table")
library(data.table)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep("a", "b", "c"), each=100), y=rnorm(300))
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
head(DT['a'])
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
setkey(DT, x)
head(DT['a'], 10)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), y=5:7)
setkey(DT1, x); setkey(DT2, x)
merge(DT1, DT2)
library(swirl)
rm(list=ls())
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
install.packages("yam1")
install.packages("yaml")
install.packages("yaml")
swirl()
library(swirl)
swirl()
library(devtools)
library(devtools)
install_github('viking/r-yaml')
swirl()
library(swirl)
swirl()
swirl()
install.packages("dplyr")
install.packages("dplyr")
swirl()
library(swirl)
swirl()
install.packages("yaml")
install.packages("yaml")
library(swirl)
swirl()
install_from_swirl("Getting And Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
swirl()
remove.packages("yaml")
install.packages("devtools")
library(devtools)
install_version("yaml", version="2.1.16")
swirl()
remove.packages("swirl")
remove.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("rjava")
yes
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
install.packages("RMySQL", type = "source")
library(RMySQL)
uscsDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb,"show databases;"); dbDisconnect(uscsDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
alTables
allTables
head(allTables)
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select bin from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2" where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMisSmall)
affyMisSmall
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
N
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode)
url<- "http://scholar.google.com/citations?user=HI-I6C0AAAJ&hl=en"
library(XML)
html <- htmlTreeParse(url, useInternalNodes = TRUE)
library(httr)
html2 = GET("cnn.com")
content2 = content(html2, as="text")
parsedHmtl = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHmtl, "//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
myapp = oauth_app("twitter", key = "mfPgl2zeDBVNUYFWbwpoFv4T9", secret = "mdpfKV11FAnZPhwJz2z0QQXqThTGd7zgBUZzQ4skZRgDAEjnto")
sig = sign_oauth1.0(myapp, token = "57149153-Jq3ShuGfzfBlGEILfy7oXHgginj29yCvLtgzVaoSu", token_secret = "GrPZGIp8e5Jya08fdudovsnOdqsnzqdY0G7zzINg4pra0
")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json2
myapp = oauth_app("twitter", key = "ft2cfdIxprxsDS4Y4dDME6ZSu
", secret = "5uy5i9JTlbKTXe67XlR0VyrjFHi0IwqZREx0LCnW0rKgJP7p7C
")
sig = sign_oauth1.0(myapp, token = "57149153-XwPGLmx6sDKvqwDQ0mgjCAMencW1wtZYYFEjiXyuy
", token_secret = "vLDyTI2dNdqMgD2rg85POwmnNlQKU4AVxVEnH22pFTKnh
")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
json2
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
sig = sign_oauth1.0(myapp, token = "57149153-XwPGLmx6sDKvqwDQ0mgjCAMencW1wtZYYFEjiXyuy", token_secret = "vLDyTI2dNdqMgD2rg85POwmnNlQKU4AVxVEnH22pFTKnh")
myapp = oauth_app("twitter", key = "ft2cfdIxprxsDS4Y4dDME6ZSu", secret = "5uy5i9JTlbKTXe67XlR0VyrjFHi0IwqZREx0LCnW0rKgJP7p7C")
sig = sign_oauth1.0(myapp, token = "57149153-XwPGLmx6sDKvqwDQ0mgjCAMencW1wtZYYFEjiXyuy", token_secret = "vLDyTI2dNdqMgD2rg85POwmnNlQKU4AVxVEnH22pFTKnh")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
library(httpuv)
install.packages("httpuv")
library(httpuv)
install.packages("yaml")
install.packages("httpuv")
remove.packages("httpuv")
install.packages("httpuv")
library(httpuv)
remove.packages("httpv")
remove.packages("httpuv")
install.packages("httpuv")
library(httpuv)
install.packages("httpuv")
remove.packages("httpuv")
library(httpuv)
install.packages("httpuv")
library(httpuv)
install.packages("rccp")
.libPaths()
library(datasets)
data(cars)
with(cars, plot(seed, dist))
with(cars, plot(speed, dist))
with(cars, plot(speed, dist))
with(cars, plot(speed, dist))
with(cars, plot(speed, dist))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
head(state)
head(state)
library(ggplot2)
data(mpg)
head(mpg)
gplot(displ, hwy, data = mpg)
library(ggplot2)
data(mpg)
head(mpg)
qplot(displ, hwy, data = mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
head(airquality)
typeof(airquality$Month)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col = "blue")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue")
)
)
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("middle", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topmiddle", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("top", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topleft", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("bottom", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {})
with(airquality, {plot(Wind~Ozone, main = "Wind and Ozone") plot(Solar.R~Ozone, main="Solar and Ozone")})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(model)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Ozone~Solar.R, airquality)
abline(model)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
x <- rnorm(100)
hist(x)
hist(x)
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
options(device = "windows")
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
options(device = "RStudioGD")
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
options(device = "windows")
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
options(device = "RStudioGD")
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
windows(); with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
windows()
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
windows(); par(mfrow = c(1, 2)); with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
with(airquality, {
plot(Wind~Ozone, main = "Wind and Ozone")
plot(Solar.R~Ozone, main="Solar and Ozone")
modelS <- lm(Solar.R~Ozone, airquality)
abline(modelS)
})
points> pchShow()
example()
example(points)
example(points)
window();example(points)
window();example(points)
example("points")
window(); example("points")
par(mfrow = c(1,1))
setwd("reproducible_research/week2/RepData_PeerAssessment1")
steps <- read.csv("activity/activity.csv")
steps <- transform(steps, date = factor(date))
steps_mean <- mean(steps$steps, na.rm = T)
steps_mean
library(plyr)
library(dplyr)
stepsPerDay <-
steps %>%
group_by(date) %>%
summarize(sum = sum(steps, na.rm = TRUE))
stepsPerDayMean <- mean(stepsPerDay$sum)
stepsPerDayMean
stepsPerDayMedian <- median(stepsPerDay$sum)
stepsPerDayMedian
intervalMeans <-
steps %>%
group_by(interval) %>%
summarize(mean = mean(steps, na.rm = TRUE))
maxInterval <- intervalMeans %>% filter(mean == max(mean))
maxInterval
NAsum <- sum(is.na(steps$steps))
steps1 <- join(steps, intervalMeans, by = "interval")
head(steps1)
steps1$steps[is.na(steps1$steps)] <- steps1$mean[is.na(steps1$steps)]
head(steps1)
stepsNew <- select(steps1, steps, date, interval)
head(stepsNew)
stepsPerDayNew <-
stepsNew %>%
group_by(date) %>%
summarize(sum = sum(steps, na.rm = TRUE))
stepsPerDayMeanNew <- mean(stepsPerDayNew$sum)
stepsPerDayMeanNew
stepsPerDayMedianNew <- median(stepsPerDayNew$sum)
stepsPerDayMedianNew
stepsPerDayNew$sum
stepsPerDayNew
stepsPerDay
?weekdays
day <- stepsNew[1,1]
day
day <- stepsNew[1,2]
day
weekdays(day)
steps <- read.csv("activity/activity.csv")
steps1 <- join(steps, intervalMeans, by = "interval")
head(steps1)
steps1$steps[is.na(steps1$steps)] <- steps1$mean[is.na(steps1$steps)]
head(steps1)
stepsNew <- select(steps1, steps, date, interval)
head(stepsNew)
stepsPerDayNew <-
stepsNew %>%
group_by(date) %>%
summarize(sum = sum(steps, na.rm = TRUE))
day <- stepsNew[1,2]
weekdays(day)
str(steps)
library(lubridate)
stepsNew$date <- as.Date(stepsNew$date, format = "%Y%m%d")
str(stepsNew)
stepsNew
steps1 <- join(steps, intervalMeans, by = "interval")
head(steps1)
steps1$steps[is.na(steps1$steps)] <- steps1$mean[is.na(steps1$steps)]
head(steps1)
stepsNew <- select(steps1, steps, date, interval)
head(stepsNew)
stepsNew$date <- ymd(stepsNew$date)
head(stepsNew)
day <- stepsNew[1,2]
day
weekdays(day)
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
stepsNew$weekday <- factor((weekdays(stepsNew$date) %in% weekdays), levels = c(TRUE, FALSE), labels = c("weekday", "weekend"))
stepsNew
select(stepsNew, weekend == "weekend")
select(stepsNew, weekday == "weekend")
head(stepsNew)
select(stepsNew, weekday == "weekday")
subset(stepsNew, weekday == "weekday")
subset(stepsNew, weekday == "weekend")
table(stepsNew)
steps$new %>% group_by(date)
steps %>% group_by(date)
steps1 <- join(steps, intervalMeans, by = "interval")
head(steps1)
steps1$steps[is.na(steps1$steps)] <- steps1$mean[is.na(steps1$steps)]
head(steps1)
stepsNew <- select(steps1, steps, date, interval)
head(stepsNew)
stepsNew$weekday <- factor((weekdays(ymd(stepsNew$date) %in% weekdays), levels = c(TRUE, FALSE), labels = c("weekday", "weekend"))
stepsNew$weekday <- factor((weekdays(ymd(stepsNew$date)) %in% weekdays), levels = c(TRUE, FALSE), labels = c("weekday", "weekend"))
head(stepsNew)
stepsNew %>% group_by(date)
stepsNew %>% group_by(date) %>% summary(steps = sum(steps))
stepsNew %>% group_by(date) %>% summarize(steps = sum(steps))
?table
with(stepsNew, table(date, weekday))
